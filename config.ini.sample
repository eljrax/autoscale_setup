;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; It is recommended to populate             ;
; the config file using the utility itself. ;
; Simply fill in the [cloud] section below  ;
; and remove everything else and launch     ;
; main.py, and you will be prompted for all ;
; the variables below in a user-friendly    ;
; manner                                    ;
;                                           ;
; This should then be put in                ;
; /opt/autoscale/autoscaler.ini or be       ;
; specified with --config-file to main.py   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[cloud]
; Your Rackspace cloud username (required, string)
username = ''
; Your rackspace API key (required, string)
api_key = ''
; The region in which you wish to operate (required, string)
region = ''
; Optionally you can specify a file containing credentials on this form
; [rackspace_cloud]
; username = 
; api_key = 
; region =
;; credentials_file = ''

;;;;;;;;;;;;;;;;;;; Remove everything below this to be prompted ;;;;;;;;;;;;;;;;;;;
[autoscale]
; You can provide an ID to a scaling group, and the config below
; will be compared to the running config. If differences are 
; detected, you can optionally sync them. If you leave this 
; parameter out, a new group will be created with the config below
; and this value will be populated automaticaly  (optional, string)
;id = ''
; Name of autoscale group (required, string)
name = 'autoscale_group'
; Number of servers to scale up by (required, integer)
scale_up = 2
; Number of servers to scale down by (required, integer)
scale_down = 2 
; Max number of servers to scale up to (required, integer)
max_entities = 16 
; Minimum number of servers to scale down to (required, integer)
min_entities = 2
; Cooldown for scaling policies. Scaling won't happen with higher frequency
; than this value (required, integer (seconds))
cooldown = 10


; This section describes the launch configuration for servers that will be
; scaled up by the policies in this group. See this link for more information
; on launch configuration:
; http://docs.rackspace.com/cas/api/v1.0/autoscale-devguide/content/PUT_putLaunchConfig_v1.0__tenantId__groups__groupId__launch_Configurations.html

[launch-configuration]
; Name of servers (an 11 character long unique string will be appended to this)
; (required, string)
name = 'autoscaled_server'
; ID of the flavor that the servers will be booted with.
; see 'nova flavor-list'  (required, string)
flavor = 'performance1-1'
; ID of the image that the servers will be booted with
; see 'nova image-list' (required, string)
image = '09de0a66-3156-48b4-90a5-1cf25a905207'
; All rackspace servers are by default provisioned with two networks, PublicNet and ServiceNet
; you can chose to skip provisioning of these networks. But be aware you will not be able to use
; many services, such as backups, dbaas, lbaas etc. All Rackspace managed servers require these networks!
; (optional, boolean)
skip_default_networks = False
; Comma separated list of cloud network names to attach to the servers in addition to the default ones (optional, list)
;networks = [ 'network-1-uuid', 'network-2-uuid' ]
; The name of a keypair on your account, which will be put on the servers (optional, string) 
;key_name = 'my_ssh_key'
; Disk config method. This is image-dependent, make sure 
; the image you use supports the disk config method you chose. Default is MANUAL (optional, string (MANUAL, or AUTO))
disk_config = 'MANUAL'
; Path to a file containing a jinja template of cloud-init YAML file. The
; default might suffice (required, string)
; cloud_init = 'templates/cloud-init.yml.j2'
; Metadata key-value pairs that will be applied to the instances (optional, dictionary)
; Note, that once set, it can only be changed, not unset altogether!
; format: { 'key': 'value', 'another_key': 'another_value' }
;metadata = { 'k': 'v', 'k2': 'v3' }

[rax-autoscaler]
; List of load balancers that the nodes will add themselves to when booted up (required, list)
; format [lb_id, another_lb_id]
load_balancers = []
; Path to private key. This key will be embedded in the cloud-init script and
; put on the autoscaled servers. This key is used to download the Ansible
; playbook (or other configuration management) from the admin server
private_key = '' 
; IP address or hostname of server from where the autoscaled server will fetch
; their bootstrap configuration from (see templates/cloud-init.yml.j2),
; The key defined in private_key above should provide
; access to this server as the 'autoscale' user. (required, string)
admin_server = ''


